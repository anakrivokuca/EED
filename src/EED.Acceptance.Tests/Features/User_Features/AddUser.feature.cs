// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18063
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EED.Acceptance.Tests.Features.User_Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Add User")]
    public partial class AddUserFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddUser.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Add User", "In order to allow user an access to the EED application\r\nAs an administrator\r\nI w" +
                    "ant to be able to add user", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I am on the Add New User page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add new valid user")]
        public virtual void AddNewValidUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new valid user", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Surname",
                        "Email",
                        "UserName",
                        "Password"});
            table1.AddRow(new string[] {
                        "John",
                        "Doe",
                        "johndoe@ny.com",
                        "johndoe",
                        "johndoe123!"});
#line 10
 testRunner.When("I enter the valid user data:", ((string)(null)), table1, "When ");
#line 13
 testRunner.And("I try to save the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.Then("I should see a success message \"User John Doe has been successfully saved.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.And("the user \"johndoe\" should be saved in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add user with an existing email")]
        public virtual void AddUserWithAnExistingEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add user with an existing email", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Surname",
                        "Email",
                        "UserName",
                        "Password"});
            table2.AddRow(new string[] {
                        "Jane",
                        "Smith",
                        "janesmith@oklahoma.com",
                        "jane",
                        "janesmith123!"});
#line 18
 testRunner.When("I enter the valid user data:", ((string)(null)), table2, "When ");
#line 21
 testRunner.But("the email \"janesmith@oklahoma.com\" is already taken", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 22
 testRunner.And("I try to save the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.Then("I should see an error on the screen \"User is not saved. DuplicateEmail\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add user with invalid password")]
        [NUnit.Framework.TestCaseAttribute("shrt1@", null)]
        [NUnit.Framework.TestCaseAttribute("weakpass@", null)]
        [NUnit.Framework.TestCaseAttribute("noalphachars1", null)]
        public virtual void AddUserWithInvalidPassword(string password, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add user with invalid password", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Surname",
                        "Email",
                        "UserName",
                        "Password"});
            table3.AddRow(new string[] {
                        "John",
                        "Doe",
                        "johndoe@ny.com",
                        "johndoe",
                        string.Format("{0}", password)});
#line 26
 testRunner.When("I enter the valid user data:", ((string)(null)), table3, "When ");
#line 29
 testRunner.But(string.Format("I enter the invalid password \"{0}\"", password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 30
 testRunner.And("I try to save the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.Then("I should see an error on the screen \"User is not saved. InvalidPassword\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
